// Mocks generated by Mockito 5.4.3 from annotations
// in dart_wot/test/binding_coap/binding_coap_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dart_wot/src/core/definitions.dart' as _i2;
import 'package:dart_wot/src/core/scripting_api/exposed_thing.dart' as _i3;
import 'package:dart_wot/src/core/scripting_api/interaction_input.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeThingDescription_0 extends _i1.SmartFake
    implements _i2.ThingDescription {
  _FakeThingDescription_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ExposedThing].
///
/// See the documentation for Mockito's code generation for more information.
class MockExposedThing extends _i1.Mock implements _i3.ExposedThing {
  MockExposedThing() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ThingDescription get thingDescription => (super.noSuchMethod(
        Invocation.getter(#thingDescription),
        returnValue: _FakeThingDescription_0(
          this,
          Invocation.getter(#thingDescription),
        ),
      ) as _i2.ThingDescription);

  @override
  _i4.Future<void> expose() => (super.noSuchMethod(
        Invocation.method(
          #expose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> destroy() => (super.noSuchMethod(
        Invocation.method(
          #destroy,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void setPropertyReadHandler(
    String? name,
    _i3.PropertyReadHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setPropertyReadHandler,
          [
            name,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setPropertyWriteHandler(
    String? name,
    _i3.PropertyWriteHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setPropertyWriteHandler,
          [
            name,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setPropertyObserveHandler(
    String? name,
    _i3.PropertyReadHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setPropertyObserveHandler,
          [
            name,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setPropertyUnobserveHandler(
    String? name,
    _i3.PropertyReadHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setPropertyUnobserveHandler,
          [
            name,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> emitPropertyChange(String? name) => (super.noSuchMethod(
        Invocation.method(
          #emitPropertyChange,
          [name],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void setActionHandler(
    String? name,
    _i3.ActionHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setActionHandler,
          [
            name,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setEventSubscribeHandler(
    String? name,
    _i3.EventSubscriptionHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setEventSubscribeHandler,
          [
            name,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setEventUnsubscribeHandler(
    String? name,
    _i3.EventSubscriptionHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setEventUnsubscribeHandler,
          [
            name,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setEventHandler(
    String? name,
    _i3.EventListenerHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setEventHandler,
          [
            name,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> emitEvent(
    String? name,
    _i5.InteractionInput? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #emitEvent,
          [
            name,
            data,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
